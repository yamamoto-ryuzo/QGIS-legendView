# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LegendViewDockWidget
                                 A QGIS plugin
 凡例を表示する
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-10-28
        git sha              : $Format:%H$
        copyright            : (C) 2020 by soja city.
        email                : none
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

#QMessageBox.information(self,'Message',type(layer).__name__,QMessageBox.Ok)

import os
import re
from io import BytesIO

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal, QSize,QVariant, Qt
from qgis.PyQt.QtGui import QBrush, QPixmap, QImage, QIcon, QFont
from qgis.PyQt.QtWidgets import  QTableWidget, QTableWidgetItem, QApplication, QWidget,QHeaderView, QMessageBox, QLabel, QStyle

#from PyQt5.QtWidgets import QTreeWidget, QTreeWidgetItem, QApplication, QWidget

from qgis.core import *
from qgis.gui import *

from operator import itemgetter

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'legend_view_dockwidget_base.ui'))


class LegendViewDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, iface, parent=None):
        """Constructor."""
        super(LegendViewDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface
        self.currentLayer = None
        self.root = QgsProject.instance().layerTreeRoot()

        vheader = QHeaderView(Qt.Orientation.Vertical)
        self.tableWidget.setVerticalHeader(vheader)
        hheader = QHeaderView(Qt.Orientation.Horizontal)
        self.tableWidget.setHorizontalHeader(hheader)
        self.tableWidget.setHorizontalHeaderLabels(["シンボル","凡例"])
        self.tableWidget.setSelectionMode(QTableWidget.NoSelection)
        self.styleComboBox.setVisible(False)
        self.styleLabel.setVisible(False)

        self.comboDataSet()
        self.comboBox.currentIndexChanged.connect(self.currentIndexChanged)
        self.mOpacityWidget.opacityChanged.connect(self.opacityChanged)
        self.styleComboBox.currentIndexChanged['QString'].connect(self.changeNamedStyle)
        self.comboBox.setCurrentIndex(-1)
        self.comboBox.setCurrentIndex(0)
        self.showLegend()

    def closeEvent(self, event):        
        self.closingPlugin.emit()
        event.accept()

    def showLegend(self):
        layer = self.currentLayer
        if layer is None:
            return

        # 名前付きスタイルリストの作成
        self.initNamedStyleList(layer)

        if isinstance(layer,QgsVectorLayer):
            symbols = layer.renderer().symbols(QgsRenderContext())
            legendItems = layer.renderer().legendSymbolItems()
            self.mOpacityWidget.setOpacity( layer.opacity())
            self.tableWidget.setVisible(True)
            self.tableWidget.horizontalHeader().setDefaultSectionSize(65)
            self.tableWidget.verticalHeader().setDefaultSectionSize(30)
            self.tableWidget.setRowCount(len(symbols))
            self.tableWidget.setColumnCount(2)
            self.tableWidget.horizontalHeader().setStretchLastSection(True)

            pm_icon_size = self.tableWidget.style().pixelMetric(QStyle.PM_ListViewIconSize)
            icon_size = QSize(self.tableWidget.columnWidth(0) - 10, pm_icon_size)

            i = 0
            for symbol in symbols:
                item1 = QTableWidgetItem()
                label = QLabel()
                label.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                pixmap = QgsSymbolLayerUtils.symbolPreviewPixmap(symbol, icon_size)
                label.setPixmap(pixmap)
                self.tableWidget.setCellWidget(i,0,label)
                i+=1

            j = 0
            for legendItem in legendItems :
                label = legendItem.label()
                other_item = not bool(label)
                item2 = QTableWidgetItem("その他の値" if other_item else legendItem.label())                
                if other_item:
                    font = QFont()
                    font.setItalic(True)
                    item2.setFont(font)

                self.tableWidget.setItem(j,1,item2)
                j+=1
            
            self.listWidget.setVisible(False)

        if isinstance(layer,QgsRasterLayer):
            self.tableWidget.setVisible(False)
            self.listWidget.setVisible(True)
            self.mOpacityWidget.setOpacity( layer.renderer().opacity())
        
    def opacityChanged(self,opacity):
        layer = self.currentLayer
        if layer is None:
            return

        if isinstance(layer,QgsVectorLayer):
            layer.setOpacity(opacity)
        if isinstance(layer,QgsRasterLayer):
            layer.renderer().setOpacity(opacity)
        layer.triggerRepaint()

    def legendChanged(self):
        self.showLegend()
    
    def getLayer(self,groups):
        node = self.root

        for group in groups[:len(groups)-1]:
            next_node = node.findGroup(group)
            if isinstance(next_node, QgsLayerTreeGroup):
                node = next_node
            else:
                return None

        for child in node.children():
            if isinstance(child, QgsLayerTreeLayer):
                if child.name() == groups[len(groups)-1]:
                    return child.layer()

        return None

    def comboDataSet(self) :
        ecs = QgsExpressionContextUtils.projectScope(QgsProject.instance())
        slist = ecs.variableNames()
        layerIdList = []
        layerIdList2 = []
        for sstr in slist:
            if "legend_" not in sstr:
                continue
            layer_name = sstr.replace("legend_","")
            layer = self.getLayer(layer_name.split("_"))
            if isinstance(layer, QgsMapLayer) :
                self.distributeOrderList(layer.id(), layer_name, ecs.variable(sstr), layerIdList, layerIdList2)

        if len(layerIdList) > 0:
            layerIdList.sort(key=itemgetter(1))
        if len(layerIdList2) > 0:
            layerIdList2.sort(key=itemgetter(1))
        layerIdList.extend(layerIdList2)

        for layerid in layerIdList:
            layer = QgsProject.instance().mapLayer(layerid[0])
            icon = QIcon()
            if isinstance(layer,QgsRasterLayer):
                icon = QgsLayerItem.iconRaster()

            elif  isinstance(layer,QgsVectorLayer):
                if ( layer.geometryType() == QgsWkbTypes.PointGeometry ) :
                    icon = QgsLayerItem.iconPoint()
                elif ( layer.geometryType() == QgsWkbTypes.LineGeometry ) :
                    icon = QgsLayerItem.iconLine()
                elif ( layer.geometryType() == QgsWkbTypes.PolygonGeometry ) :
                    icon = QgsLayerItem.iconPolygon()
            else :
                continue

            self.comboBox.addItem(icon,layer.name(),layerid[0])
            # 対象レイヤの凡例変更シグナルを検知して処理する
            layer.legendChanged.connect(self.legendChanged)

    
    def currentIndexChanged(self,index):
        self.currentLayer = QgsProject.instance().mapLayer(self.comboBox.itemData(index))
        self.showLegend()

    def initNamedStyleList(self, layer: QgsMapLayer):
        # 名前付きスタイルリストを作成する

        self.styleComboBox.blockSignals(True)
        self.styleComboBox.setVisible(False)
        self.styleLabel.setVisible(False)
        self.styleComboBox.clear()

        if isinstance(layer, QgsMapLayer):
            manager = layer.styleManager()
            style_count = len(manager.styles())

            if style_count > 0:
                self.styleComboBox.setVisible(style_count > 1)
                self.styleLabel.setVisible(style_count > 1)

                for idx, name in enumerate(manager.styles()):
                    self.styleComboBox.addItem(name)
                    if name == manager.currentStyle():
                        self.styleComboBox.setCurrentIndex(idx)

        self.styleComboBox.blockSignals(False)

    def changeNamedStyle(self, styleName):
        # 指定の名前のレイヤスタイルにする
        self.currentLayer.styleManager().setCurrentStyle(styleName)

    def distributeOrderList(self, layer_id, layer_name, orderValue, numericList: list, nonNumericList: list):

        while True:
            if isinstance(orderValue, QVariant):
                break

            m = re.fullmatch(r"\d+", orderValue)
            if not m is None:
                numericList.append([layer_id, int(orderValue)])
                return

            n = re.fullmatch(r"\d*\.\d+", orderValue)
            if not n is None:
                numericList.append([layer_id, float(orderValue)])
                return
            
            break
        
        nonNumericList.append([layer_id, layer_name])
